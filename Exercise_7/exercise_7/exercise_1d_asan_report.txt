root@32ca6c01ae39:/libxml2/outputs/fuzzer01/crashes# /libxml2/fuzzer2 < id\:000018\,sig\:06\,src\:000943\,op\:havoc\,rep\:2
=================================================================
==17291==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7ffea672a148 at pc 0x00000074aa0a bp 0x7ffea6729cb0 sp 0x7ffea6729ca8
READ of size 1 at 0x7ffea672a148 thread T0
    #0 0x74aa09 in xmlStrdup /libxml2/xmlstring.c:70:12
    #1 0x4ce108 in xmlRegNewParserCtxt /libxml2/xmlregexp.c:692:16
    #2 0x4ce108 in xmlRegexpCompile /libxml2/xmlregexp.c:5444:12
    #3 0x4c4617 in harness /libxml2/./harness2.c:14:29
    #4 0x4c4617 in main /libxml2/./harness2.c:21:3
    #5 0x7fe500d7d082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)
    #6 0x41c5dd in _start (/libxml2/fuzzer2+0x41c5dd)

Address 0x7ffea672a148 is located in stack of thread T0 at offset 1032 in frame
    #0 0x4c444f in main /libxml2/./harness2.c:17

  This frame has 1 object(s):
    [32, 1032) 'input' (line 18) <== Memory access at offset 1032 overflows this variable
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)
SUMMARY: AddressSanitizer: stack-buffer-overflow /libxml2/xmlstring.c:70:12 in xmlStrdup
Shadow bytes around the buggy address:
  0x100054cdd3d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100054cdd3e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100054cdd3f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100054cdd400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100054cdd410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x100054cdd420: 00 00 00 00 00 00 00 00 00[f3]f3 f3 f3 f3 f3 f3
  0x100054cdd430: f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 00 00 00 00
  0x100054cdd440: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100054cdd450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100054cdd460: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x100054cdd470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==17291==ABORTING